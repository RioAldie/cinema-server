// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String @unique
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id          String   @id @default(uuid())
  title       String
  description String
  duration    Int      
  releaseDate DateTime
  posterUrl   String?
  showtimes   Showtime[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cinema {
  id        String   @id @default(uuid())
  name      String
  location  String
  screens   Screen[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Screen {
  id        String   @id @default(uuid())
  name      String
  capacity  Int
  cinemaId  String
  cinema    Cinema   @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  seats     Seat[]
  showtimes Showtime[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seat {
  id        String   @id @default(uuid())
  screenId  String
  screen    Screen   @relation(fields: [screenId], references: [id], onDelete: Cascade)
  row       String   // Example: "A", "B", "C"
  number    Int      // Example: 1, 2, 3
  bookings  BookingSeat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([screenId, row, number]) 
}

model Showtime {
  id        String   @id @default(uuid())
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  screenId  String
  screen    Screen   @relation(fields: [screenId], references: [id], onDelete: Cascade)
  startTime DateTime
  price     Decimal
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  showtimeId  String
  showtime    Showtime @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  totalPrice  Decimal
  seats       BookingSeat[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BookingSeat {
  id        String   @id @default(uuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  seatId    String
  seat      Seat     @relation(fields: [seatId], references: [id], onDelete: Cascade)
}


